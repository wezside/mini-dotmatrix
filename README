SymaLib v0.1 by Jim Hung
------------------------

For reference, see www.jimhung.com.


INSTALLATION INSTRUCTIONS:
--------------------------

1) Extract the .cpp and .h files in this archive to your Arduino
   libraries folder:

	e.g. ".\sketchbook\libraries\SymaLib\"

2) You might need to restart the Arduino IDE for it to show up.

3) Check Sketch > Import Library... for the SymaLib library.

Finished.



LIBRARY REFERENCE
-----------------

Here are the methods provided by the SymaLib library:

SymaLib()

	Constructor. No arguments — initializes control byte array.


setPulseListParse(uint16_t pulses[][2], int& numpulses, int resolution, int fuzziness)

	Returns: Boolean

	Arguments:

		uint16_t pulses[][2] — The pulse array populated by the ‘listenForIR’-like method.

		int& numpulses — The number of pulses heard by the ‘listenForIR’-like method.

		int resolution — The RESOLUTION constant used to calibrate the IR listener.

		int fuzziness — The FUZZINESS constant used to calibrate the IR listener.

	Description:

		This method parses the pulse-array and stores it as an array of integers, either 1 or 0. 
		This array is the basis of the object’s Get methods.


getYawDec()

	Returns: Int

	Arguments: None.

	Description:

		Returns an integer of the decimal value of the Yaw control.


getPitchDec()

	Returns: Int

	Arguments: None.

	Description:

		Returns an integer of the decimal value of the Pitch control.


getChanDec()

	Returns: Int

	Arguments: None.

	Description:

		Returns an integer of the decimal value of the channel switch.


getThrottleDec()

	Returns: Int

	Arguments: None.
	
	Description:

		Returns an integer of the decimal value of the Throttle control.

getTrimDec()

	Returns: Int

	Arguments: None.

	Description:

		Returns an integer of the decimal value of the Trim control.

getCtrlPacketBin()

	Returns: String

	Arguments: None.

	Description:

		Returns a String of ‘1’ and ‘0’s representing the 32-bit control packet. Useful for debugging.

